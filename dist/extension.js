"use strict";var b=Object.create;var v=Object.defineProperty;var $=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,A=Object.prototype.hasOwnProperty;var I=(a,t)=>{for(var e in t)v(a,e,{get:t[e],enumerable:!0})},D=(a,t,e,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of P(t))!A.call(a,s)&&s!==e&&v(a,s,{get:()=>t[s],enumerable:!(i=$(t,s))||i.enumerable});return a};var h=(a,t,e)=>(e=a!=null?b(j(a)):{},D(t||!a||!a.__esModule?v(e,"default",{value:a,enumerable:!0}):e,a)),E=a=>D(v({},"__esModule",{value:!0}),a);var N={};I(N,{activate:()=>x,deactivate:()=>B});module.exports=E(N);var p=h(require("vscode"));var c=h(require("vscode")),r=h(require("fs")),l=h(require("path"));var m=h(require("vscode")),S=h(require("path")),o=class{static DEFAULT_CONFIG={ignoredPaths:[".activity-logs","node_modules",".git",".vscode","dist","build",".DS_Store"],autoSaveInterval:30*60*1e3,maxChangesBeforeAutoSave:100};static async getFileContent(t){try{return(await m.workspace.openTextDocument(t)).getText()}catch{return""}}static async countLines(t){try{return(await m.workspace.openTextDocument(t)).lineCount}catch{return 0}}static getFileExtension(t){let e=S.extname(t).toLowerCase();return e?e.slice(1):"unknown"}static formatDuration(t){let e=Math.floor(t/36e5),i=Math.floor(t%(1e3*60*60)/(1e3*60));return`${e}h ${i}m`}static getPeakActivityHour(t){let e=new Array(24).fill(0);t.forEach(s=>{let n=new Date(s.timestamp).getHours();e[n]++});let i=e.indexOf(Math.max(...e));return`${i}:00-${(i+1)%24}:00`}static async showNotification(t,e="info"){let i=["View Details","Dismiss"];if(await m.window.showInformationMessage(t,...i)==="View Details"){let n=await m.workspace.openTextDocument({content:t,language:"markdown"});await m.window.showTextDocument(n)}}static shouldIgnoreFile(t,e){return e.some(i=>t.includes(i))}};var u=require("child_process"),w=h(require("vscode")),f=class{async getDetails(t){try{let e=(0,u.execSync)("git rev-parse --abbrev-ref HEAD",{cwd:t}).toString().trim(),i=(0,u.execSync)("git rev-parse --short HEAD",{cwd:t}).toString().trim(),s=(0,u.execSync)("git config --get remote.origin.url",{cwd:t}).toString().trim();return{branch:e,commitHash:i,remote:s,name:t.split("/").pop()||""}}catch(e){return console.error("Error getting git details:",e),{branch:"unknown",commitHash:"unknown",remote:"unknown",name:"unknown"}}}async commitAndPush(t,e,i){await w.window.withProgress({location:w.ProgressLocation.Notification,title:"Pushing activity logs",cancellable:!1},async s=>{try{s.report({message:"Adding files...",increment:33});for(let n of i)(0,u.execSync)(`git add "${n}"`,{cwd:t});s.report({message:"Committing changes...",increment:33}),(0,u.execSync)(`git commit -m "${e}"`,{cwd:t}),s.report({message:"Pushing to remote...",increment:34}),(0,u.execSync)("git push",{cwd:t})}catch(n){throw new Error(`Git operation failed: ${n}`)}})}};var y=class{constructor(t,e){this.workspaceRoot=t;this.config={...o.DEFAULT_CONFIG,...e},this.logsDir=l.join(t,".activity-logs"),this.gitService=new f,this.currentLog=this.createEmptyLog(),this.fileWatcher=c.workspace.createFileSystemWatcher("**/*"),this.statusBarItem=c.window.createStatusBarItem(c.StatusBarAlignment.Left),this.projectDetails={name:"",branch:"",commitHash:"",remote:""}}config;logsDir;gitService;currentLog;fileWatcher;statusBarItem;projectDetails;createEmptyLog(){return{date:new Date().toISOString().split("T")[0],changes:[],totalChanges:0,startTime:new Date().toISOString(),endTime:new Date().toISOString(),projectName:"",branchName:""}}async startTracking(){await this.initialize(),this.setupFileWatcher(),this.setupAutoSave()}async initialize(){this.ensureLogsDirectory(),this.projectDetails=await this.gitService.getDetails(this.workspaceRoot),this.initializeCurrentLog(),this.setupStatusBar()}ensureLogsDirectory(){r.existsSync(this.logsDir)||(r.mkdirSync(this.logsDir,{recursive:!0}),r.writeFileSync(l.join(this.logsDir,".gitignore"),`log-*.json
!final-log-*.json
.DS_Store`))}initializeCurrentLog(){this.currentLog={...this.createEmptyLog(),projectName:this.projectDetails.name,branchName:this.projectDetails.branch}}setupStatusBar(){this.statusBarItem=c.window.createStatusBarItem(c.StatusBarAlignment.Left,100),this.updateStatusBar(),this.statusBarItem.command="activity-tracker.pushLogs",this.statusBarItem.show()}setupFileWatcher(){this.fileWatcher=c.workspace.createFileSystemWatcher("**/*"),this.fileWatcher.onDidChange(t=>this.handleFileChange(t,"modified")),this.fileWatcher.onDidCreate(t=>this.handleFileChange(t,"created")),this.fileWatcher.onDidDelete(t=>this.handleFileChange(t,"deleted"))}setupAutoSave(){setInterval(()=>this.saveCurrentLog(),this.config.autoSaveInterval)}async handleFileChange(t,e){try{let i=l.relative(this.workspaceRoot,t.fsPath);if(o.shouldIgnoreFile(i,this.config.ignoredPaths))return;let s={fileName:i,timestamp:new Date,changeType:e,linesChanged:e!=="deleted"?await o.countLines(t):0,fileType:o.getFileExtension(t.fsPath)};this.currentLog.changes.push(s),this.currentLog.totalChanges++,this.currentLog.endTime=new Date().toISOString(),this.updateStatusBar(),this.currentLog.changes.length>=this.config.maxChangesBeforeAutoSave&&await this.saveCurrentLog()}catch(i){console.error("Error tracking file change:",i)}}updateStatusBar(){let t=this.currentLog.totalChanges>0?"\u{1F4DD}":"\u{1F468}\u200D\u{1F4BB}";this.statusBarItem.text=`${t} Changes: ${this.currentLog.totalChanges}`,this.statusBarItem.tooltip=`Click to push activity logs
Last change: ${new Date().toLocaleTimeString()}`}async saveCurrentLog(){if(this.currentLog.changes.length>0){let t=`log-${new Date().toISOString().replace(/[:.]/g,"-")}.json`;r.writeFileSync(l.join(this.logsDir,t),JSON.stringify(this.currentLog,null,2)),this.initializeCurrentLog()}}async pushLogs(){try{await this.saveCurrentLog();let t=await this.createDailySummary(),e=l.join(this.logsDir,`final-log-${t.date}.json`);r.writeFileSync(e,JSON.stringify(t,null,2)),await this.gitService.commitAndPush(this.workspaceRoot,this.createCommitMessage(t),[e]),await o.showNotification(`Successfully pushed activity logs! \u{1F389}
${this.createSuccessMessage(t)}`)}catch(t){let e=t instanceof Error?t.message:"Unknown error occurred";throw await o.showNotification(`Failed to push logs: ${e}`,"error"),t}}async createDailySummary(){let t=this.getAllLogs(),e=new Map,i=new Map,s=0,n=0;t.forEach(d=>{d.changes.forEach(g=>{e.set(g.fileName,(e.get(g.fileName)||0)+1),i.set(g.fileType,(i.get(g.fileType)||0)+1),s++,n+=g.linesChanged})});let C=Array.from(e.entries()).sort((d,g)=>g[1]-d[1])[0]||["None",0],L=new Date(t[0]?.startTime||new Date),F=new Date(t[t.length-1]?.endTime||new Date),k=o.formatDuration(F.getTime()-L.getTime()),T=t.flatMap(d=>d.changes);return{date:new Date().toISOString().split("T")[0],summary:this.createDetailedSummary(e),statistics:{totalFiles:e.size,totalChanges:s,mostEditedFile:C[0],workDuration:k,fileTypes:Object.fromEntries(i),peakActivityHour:o.getPeakActivityHour(T),totalLinesChanged:n},projectDetails:this.projectDetails}}getAllLogs(){return r.readdirSync(this.logsDir).filter(t=>t.startsWith("log-")).map(t=>JSON.parse(r.readFileSync(l.join(this.logsDir,t),"utf-8")))}createDetailedSummary(t){return Array.from(t.entries()).sort((e,i)=>i[1]-e[1]).map(([e,i])=>`- ${e}: ${i} changes`).join(`
`)}createCommitMessage(t){return`\u{1F4CA} Daily Activity Log: ${t.date}
    
    \u{1F50D} Summary:
    - Files changed: ${t.statistics.totalFiles}
    - Total changes: ${t.statistics.totalChanges}
    - Lines changed: ${t.statistics.totalLinesChanged}
    - Duration: ${t.statistics.workDuration}
    - Peak activity: ${t.statistics.peakActivityHour}
    
    Most edited: ${t.statistics.mostEditedFile}
    Branch: ${t.projectDetails.branch}
    Hash: ${t.projectDetails.commitHash}`}createSuccessMessage(t){return`
    \u{1F4C8} Today's Statistics:
    \u2022 Total Files: ${t.statistics.totalFiles}
    \u2022 Changes: ${t.statistics.totalChanges}
    \u2022 Lines: ${t.statistics.totalLinesChanged}
    \u2022 Duration: ${t.statistics.workDuration}
    \u2022 Peak Time: ${t.statistics.peakActivityHour}
    
    \u{1F527} File Types:
    ${Object.entries(t.statistics.fileTypes).map(([e,i])=>`\u2022 ${e}: ${i}`).join(`
`)}
    
    Keep up the great work! \u{1F680}`}dispose(){this.fileWatcher.dispose(),this.statusBarItem.dispose()}};function x(a){let t=p.workspace.workspaceFolders?.[0].uri.fsPath;if(!t){p.window.showErrorMessage("No workspace folder found!");return}let e=new y(t);e.startTracking().catch(s=>{p.window.showErrorMessage(`Failed to start activity tracking: ${s.message}`)});let i=p.commands.registerCommand("activity-tracker.pushLogs",()=>e.pushLogs());a.subscriptions.push(i),a.subscriptions.push(e)}function B(){}0&&(module.exports={activate,deactivate});
